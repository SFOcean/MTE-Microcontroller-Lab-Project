
32LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800066  00800066  000003b0  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b0  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000830  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000033a  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000352  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000174  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d4  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000510  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <T1Delay>:
				
	}
}

void T1Delay(){
	TCNT1 = 0;     // timer starts from 00
  92:	1d bc       	out	0x2d, r1	; 45
  94:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 750 - 1; // Output Compare Register A
  96:	8d ee       	ldi	r24, 0xED	; 237
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	9b bd       	out	0x2b, r25	; 43
  9c:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0x00; TCCR1B = 0x0C; //Run Timer1, Clear
  9e:	1f bc       	out	0x2f, r1	; 47
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	8e bd       	out	0x2e, r24	; 46
	// Timer on Compare Match, Prescaler mode 1:256
	while ((TIFR & (1<<OCF1A))==0);//wait for OCF1A
  a4:	08 b6       	in	r0, 0x38	; 56
  a6:	04 fe       	sbrs	r0, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <T1Delay+0x12>
	TCCR1B = 0x00;            // Stop Timer
  aa:	1e bc       	out	0x2e, r1	; 46
	TIFR =  (1<<OCF1A);      //clear OCF2 flag
  ac:	80 e1       	ldi	r24, 0x10	; 16
  ae:	88 bf       	out	0x38, r24	; 56
  b0:	08 95       	ret

000000b2 <main>:
void T1Delay();
char SHOWA [16];

int main(void)
{
	DDRA=0;
  b2:	1a ba       	out	0x1a, r1	; 26
	PORTA=0b00000011;
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	8b bb       	out	0x1b, r24	; 27
	//int value;

	//ADC_Init();
	int16_t COUNTA =0;
	
lcd_init(LCD_DISP_ON_CURSOR); /*initialize lcd,display on, cursor on */
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>

                 lcd_clrscr();             /* clear screen of lcd */
  be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>
		lcd_home();               /* bring cursor to 0,0 */
  c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_home>
		lcd_puts("hello");        /* type something random */
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 00 01 	call	0x200	; 0x200 <lcd_puts>
		lcd_gotoxy(0,1);          /* go to 2nd row 1st col */
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>


		lcd_puts("");  /* type something random */
  d6:	85 e6       	ldi	r24, 0x65	; 101
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 00 01 	call	0x200	; 0x200 <lcd_puts>
	PORTA=0b00000011;
	//char String[5];
	//int value;

	//ADC_Init();
	int16_t COUNTA =0;
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
	
		/* LCD16x2 cursor position */
		//value=ADC_Read(0);	/* Read ADC channel 0 */
		//itoa(value,String,10);	/* Integer to string conversion */ 
		if (!(PINA &(00000001))==0)
  e2:	c8 9b       	sbis	0x19, 0	; 25
  e4:	0c c0       	rjmp	.+24     	; 0xfe <main+0x4c>
		{
			COUNTA++;
  e6:	21 96       	adiw	r28, 0x01	; 1
			T1Delay();
  e8:	0e 94 49 00 	call	0x92	; 0x92 <T1Delay>
			T1Delay();
  ec:	0e 94 49 00 	call	0x92	; 0x92 <T1Delay>
			itoa(COUNTA,SHOWA,10);
  f0:	4a e0       	ldi	r20, 0x0A	; 10
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	66 e6       	ldi	r22, 0x66	; 102
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	ce 01       	movw	r24, r28
  fa:	0e 94 44 01 	call	0x288	; 0x288 <itoa>
		}
		lcd_puts(SHOWA);
  fe:	86 e6       	ldi	r24, 0x66	; 102
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 00 01 	call	0x200	; 0x200 <lcd_puts>
		T1Delay();
 106:	0e 94 49 00 	call	0x92	; 0x92 <T1Delay>
		 lcd_clrscr();						
 10a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>
				
	}
 10e:	e9 cf       	rjmp	.-46     	; 0xe2 <main+0x30>

00000110 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 110:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 112:	00 c0       	rjmp	.+0      	; 0x114 <toggle_e+0x4>
    lcd_e_low();
 114:	c6 98       	cbi	0x18, 6	; 24
 116:	08 95       	ret

00000118 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 11e:	66 23       	and	r22, r22
 120:	11 f0       	breq	.+4      	; 0x126 <lcd_write+0xe>
       lcd_rs_high();
 122:	c4 9a       	sbi	0x18, 4	; 24
 124:	01 c0       	rjmp	.+2      	; 0x128 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 126:	c4 98       	cbi	0x18, 4	; 24
    }
    lcd_rw_low();
 128:	c5 98       	cbi	0x18, 5	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	87 bb       	out	0x17, r24	; 23

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 130:	c8 b3       	in	r28, 0x18	; 24
 132:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 134:	8d 2f       	mov	r24, r29
 136:	82 95       	swap	r24
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8c 2b       	or	r24, r28
 13c:	88 bb       	out	0x18, r24	; 24
        lcd_e_toggle();
 13e:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 142:	df 70       	andi	r29, 0x0F	; 15
 144:	dc 2b       	or	r29, r28
 146:	d8 bb       	out	0x18, r29	; 24
        lcd_e_toggle();
 148:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 14c:	cf 60       	ori	r28, 0x0F	; 15
 14e:	c8 bb       	out	0x18, r28	; 24
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 156:	88 23       	and	r24, r24
 158:	11 f0       	breq	.+4      	; 0x15e <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 15a:	c4 9a       	sbi	0x18, 4	; 24
 15c:	01 c0       	rjmp	.+2      	; 0x160 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 15e:	c4 98       	cbi	0x18, 4	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 160:	c5 9a       	sbi	0x18, 5	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 162:	87 b3       	in	r24, 0x17	; 23
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	87 bb       	out	0x17, r24	; 23
        
        lcd_e_high();
 168:	c6 9a       	sbi	0x18, 6	; 24
        lcd_e_delay();        
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 16c:	96 b3       	in	r25, 0x16	; 22
        lcd_e_low();
 16e:	c6 98       	cbi	0x18, 6	; 24
        
        lcd_e_delay();                       /* Enable 500ns low       */
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_read+0x1c>
        
        lcd_e_high();
 172:	c6 9a       	sbi	0x18, 6	; 24
        lcd_e_delay();
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 176:	86 b3       	in	r24, 0x16	; 22
        lcd_e_low();
 178:	c6 98       	cbi	0x18, 6	; 24
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 17a:	92 95       	swap	r25
 17c:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 17e:	8f 70       	andi	r24, 0x0F	; 15
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 180:	89 2b       	or	r24, r25
 182:	08 95       	ret

00000184 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_read>
 18a:	88 23       	and	r24, r24
 18c:	dc f3       	brlt	.-10     	; 0x184 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_read>
    
}/* lcd_waitbusy */
 19c:	08 95       	ret

0000019e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 1a2:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_waitbusy>
    lcd_write(cmd,0);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write>
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 1b2:	61 11       	cpse	r22, r1
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1b6:	80 58       	subi	r24, 0x80	; 128
 1b8:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
 1bc:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1be:	80 54       	subi	r24, 0x40	; 64
 1c0:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
 1cc:	08 95       	ret

000001ce <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
 1d4:	08 95       	ret

000001d6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1da:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_waitbusy>
    if (c=='\n')
 1de:	ca 30       	cpi	r28, 0x0A	; 10
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1e2:	80 34       	cpi	r24, 0x40	; 64
 1e4:	10 f4       	brcc	.+4      	; 0x1ea <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1ec:	80 58       	subi	r24, 0x80	; 128
 1ee:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	8c 2f       	mov	r24, r28
 1f8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write>
    }

}/* lcd_putc */
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 204:	ec 01       	movw	r28, r24
 206:	89 91       	ld	r24, Y+
 208:	88 23       	and	r24, r24
 20a:	29 f0       	breq	.+10     	; 0x216 <lcd_puts+0x16>
        lcd_putc(c);
 20c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 210:	89 91       	ld	r24, Y+
 212:	81 11       	cpse	r24, r1
 214:	fb cf       	rjmp	.-10     	; 0x20c <lcd_puts+0xc>
        lcd_putc(c);
    }

}/* lcd_puts */
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 224:	87 b3       	in	r24, 0x17	; 23
 226:	8f 67       	ori	r24, 0x7F	; 127
 228:	87 bb       	out	0x17, r24	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	fa ef       	ldi	r31, 0xFA	; 250
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 232:	c1 9a       	sbi	0x18, 1	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 234:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_toggle();
 236:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	fe e4       	ldi	r31, 0x4E	; 78
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 242:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d1 e0       	ldi	r29, 0x01	; 1
 24a:	fe 01       	movw	r30, r28
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 250:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 254:	fe 01       	movw	r30, r28
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	c0 98       	cbi	0x18, 0	; 24
    lcd_e_toggle();
 25c:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 260:	21 97       	sbiw	r28, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 270:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 27a:	81 2f       	mov	r24, r17
 27c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_command>

}/* lcd_init */
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <itoa>:
 288:	fb 01       	movw	r30, r22
 28a:	9f 01       	movw	r18, r30
 28c:	e8 94       	clt
 28e:	42 30       	cpi	r20, 0x02	; 2
 290:	c4 f0       	brlt	.+48     	; 0x2c2 <itoa+0x3a>
 292:	45 32       	cpi	r20, 0x25	; 37
 294:	b4 f4       	brge	.+44     	; 0x2c2 <itoa+0x3a>
 296:	4a 30       	cpi	r20, 0x0A	; 10
 298:	29 f4       	brne	.+10     	; 0x2a4 <itoa+0x1c>
 29a:	97 fb       	bst	r25, 7
 29c:	1e f4       	brtc	.+6      	; 0x2a4 <itoa+0x1c>
 29e:	90 95       	com	r25
 2a0:	81 95       	neg	r24
 2a2:	9f 4f       	sbci	r25, 0xFF	; 255
 2a4:	64 2f       	mov	r22, r20
 2a6:	77 27       	eor	r23, r23
 2a8:	0e 94 75 01 	call	0x2ea	; 0x2ea <__udivmodhi4>
 2ac:	80 5d       	subi	r24, 0xD0	; 208
 2ae:	8a 33       	cpi	r24, 0x3A	; 58
 2b0:	0c f0       	brlt	.+2      	; 0x2b4 <itoa+0x2c>
 2b2:	89 5d       	subi	r24, 0xD9	; 217
 2b4:	81 93       	st	Z+, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	a1 f7       	brne	.-24     	; 0x2a4 <itoa+0x1c>
 2bc:	16 f4       	brtc	.+4      	; 0x2c2 <itoa+0x3a>
 2be:	5d e2       	ldi	r21, 0x2D	; 45
 2c0:	51 93       	st	Z+, r21
 2c2:	10 82       	st	Z, r1
 2c4:	c9 01       	movw	r24, r18
 2c6:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <strrev>

000002ca <strrev>:
 2ca:	dc 01       	movw	r26, r24
 2cc:	fc 01       	movw	r30, r24
 2ce:	67 2f       	mov	r22, r23
 2d0:	71 91       	ld	r23, Z+
 2d2:	77 23       	and	r23, r23
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <strrev+0x4>
 2d6:	32 97       	sbiw	r30, 0x02	; 2
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <strrev+0x18>
 2da:	7c 91       	ld	r23, X
 2dc:	6d 93       	st	X+, r22
 2de:	70 83       	st	Z, r23
 2e0:	62 91       	ld	r22, -Z
 2e2:	ae 17       	cp	r26, r30
 2e4:	bf 07       	cpc	r27, r31
 2e6:	c8 f3       	brcs	.-14     	; 0x2da <strrev+0x10>
 2e8:	08 95       	ret

000002ea <__udivmodhi4>:
 2ea:	aa 1b       	sub	r26, r26
 2ec:	bb 1b       	sub	r27, r27
 2ee:	51 e1       	ldi	r21, 0x11	; 17
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <__udivmodhi4_ep>

000002f2 <__udivmodhi4_loop>:
 2f2:	aa 1f       	adc	r26, r26
 2f4:	bb 1f       	adc	r27, r27
 2f6:	a6 17       	cp	r26, r22
 2f8:	b7 07       	cpc	r27, r23
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__udivmodhi4_ep>
 2fc:	a6 1b       	sub	r26, r22
 2fe:	b7 0b       	sbc	r27, r23

00000300 <__udivmodhi4_ep>:
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	5a 95       	dec	r21
 306:	a9 f7       	brne	.-22     	; 0x2f2 <__udivmodhi4_loop>
 308:	80 95       	com	r24
 30a:	90 95       	com	r25
 30c:	bc 01       	movw	r22, r24
 30e:	cd 01       	movw	r24, r26
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
