
32LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000286  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b9  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058e  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002de  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c6  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ff  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b7  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000057  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000020b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	//return(Ain);			/* Return digital value*/
//} 


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	//char String[5];
	//int value;

	//ADC_Init();
	
lcd_init(LCD_DISP_ON_CURSOR); /*initialize lcd,display on, cursor on */
  86:	8e e0       	ldi	r24, 0x0E	; 14
  88:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_init>

                 lcd_clrscr();             /* clear screen of lcd */
  8c:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_clrscr>
		lcd_home();               /* bring cursor to 0,0 */
  90:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_home>
		lcd_puts("hello");        /* type something random */
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		lcd_gotoxy(0,1);          /* go to 2nd row 1st col */
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_gotoxy>


		lcd_puts("");  /* type something random */
  a4:	86 e6       	ldi	r24, 0x66	; 102
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
	{
	
		/* LCD16x2 cursor position */
		//value=ADC_Read(0);	/* Read ADC channel 0 */
		//itoa(value,String,10);	/* Integer to string conversion */ 
		lcd_puts("My name is Khan");
  ac:	c7 e6       	ldi	r28, 0x67	; 103
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	ce 01       	movw	r24, r28
  b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e3       	ldi	r24, 0x3F	; 63
  b8:	9c e9       	ldi	r25, 0x9C	; 156
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x38>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3e>
  c0:	00 00       	nop
		_delay_ms(20);
		 lcd_clrscr();						
  c2:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_clrscr>
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <main+0x2e>

000000c8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  c8:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
  ca:	00 c0       	rjmp	.+0      	; 0xcc <toggle_e+0x4>
    lcd_e_low();
  cc:	c6 98       	cbi	0x18, 6	; 24
}
  ce:	08 95       	ret

000000d0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	08 2f       	mov	r16, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  d6:	66 23       	and	r22, r22
  d8:	11 f0       	breq	.+4      	; 0xde <lcd_write+0xe>
       lcd_rs_high();
  da:	c4 9a       	sbi	0x18, 4	; 24
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  de:	c4 98       	cbi	0x18, 4	; 24
    }
    lcd_rw_low();
  e0:	c5 98       	cbi	0x18, 5	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	87 bb       	out	0x17, r24	; 23

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
  e8:	18 b3       	in	r17, 0x18	; 24
  ea:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  ec:	80 2f       	mov	r24, r16
  ee:	82 95       	swap	r24
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	81 2b       	or	r24, r17
  f4:	88 bb       	out	0x18, r24	; 24
        lcd_e_toggle();
  f6:	0e 94 64 00 	call	0xc8	; 0xc8 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
  fa:	0f 70       	andi	r16, 0x0F	; 15
  fc:	01 2b       	or	r16, r17
  fe:	08 bb       	out	0x18, r16	; 24
        lcd_e_toggle();
 100:	0e 94 64 00 	call	0xc8	; 0xc8 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 104:	1f 60       	ori	r17, 0x0F	; 15
 106:	18 bb       	out	0x18, r17	; 24
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 10e:	88 23       	and	r24, r24
 110:	11 f0       	breq	.+4      	; 0x116 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 112:	c4 9a       	sbi	0x18, 4	; 24
 114:	01 c0       	rjmp	.+2      	; 0x118 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 116:	c4 98       	cbi	0x18, 4	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 118:	c5 9a       	sbi	0x18, 5	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	87 bb       	out	0x17, r24	; 23
        
        lcd_e_high();
 120:	c6 9a       	sbi	0x18, 6	; 24
        lcd_e_delay();        
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 124:	96 b3       	in	r25, 0x16	; 22
        lcd_e_low();
 126:	c6 98       	cbi	0x18, 6	; 24
        
        lcd_e_delay();                       /* Enable 500ns low       */
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x1c>
        
        lcd_e_high();
 12a:	c6 9a       	sbi	0x18, 6	; 24
        lcd_e_delay();
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 12e:	86 b3       	in	r24, 0x16	; 22
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 130:	92 95       	swap	r25
 132:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 134:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 136:	c6 98       	cbi	0x18, 6	; 24
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 138:	89 2b       	or	r24, r25
 13a:	08 95       	ret

0000013c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_read>
 142:	88 23       	and	r24, r24
 144:	dc f3       	brlt	.-10     	; 0x13c <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_read>
    
}/* lcd_waitbusy */
 154:	08 95       	ret

00000156 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 156:	1f 93       	push	r17
 158:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 15a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_waitbusy>
    lcd_write(cmd,0);
 15e:	81 2f       	mov	r24, r17
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write>
}
 166:	1f 91       	pop	r17
 168:	08 95       	ret

0000016a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 16a:	1f 93       	push	r17
 16c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 16e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_waitbusy>
    lcd_write(data,1);
 172:	81 2f       	mov	r24, r17
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write>
}
 17a:	1f 91       	pop	r17
 17c:	08 95       	ret

0000017e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 17e:	66 23       	and	r22, r22
 180:	21 f4       	brne	.+8      	; 0x18a <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 182:	80 58       	subi	r24, 0x80	; 128
 184:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 188:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 18a:	80 54       	subi	r24, 0x40	; 64
 18c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 190:	08 95       	ret

00000192 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 192:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_waitbusy>
}
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret

0000019a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
}
 1a0:	08 95       	ret

000001a2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
}
 1a8:	08 95       	ret

000001aa <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1aa:	1f 93       	push	r17
 1ac:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1ae:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_waitbusy>
    if (c=='\n')
 1b2:	1a 30       	cpi	r17, 0x0A	; 10
 1b4:	49 f4       	brne	.+18     	; 0x1c8 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1b6:	80 34       	cpi	r24, 0x40	; 64
 1b8:	10 f4       	brcc	.+4      	; 0x1be <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 1be:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1c8:	81 2f       	mov	r24, r17
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write>
    }

}/* lcd_putc */
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 1da:	88 81       	ld	r24, Y
 1dc:	88 23       	and	r24, r24
 1de:	31 f0       	breq	.+12     	; 0x1ec <lcd_puts+0x18>
 1e0:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 1e2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1e6:	89 91       	ld	r24, Y+
 1e8:	88 23       	and	r24, r24
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1f8:	fc 01       	movw	r30, r24
 1fa:	84 91       	lpm	r24, Z+
 1fc:	88 23       	and	r24, r24
 1fe:	41 f0       	breq	.+16     	; 0x210 <lcd_puts_p+0x1e>
 200:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 202:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_putc>
 206:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 208:	21 96       	adiw	r28, 0x01	; 1
 20a:	84 91       	lpm	r24, Z+
 20c:	88 23       	and	r24, r24
 20e:	c9 f7       	brne	.-14     	; 0x202 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 21e:	87 b3       	in	r24, 0x17	; 23
 220:	8f 67       	ori	r24, 0x7F	; 127
 222:	87 bb       	out	0x17, r24	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	9a ef       	ldi	r25, 0xFA	; 250
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 22c:	c1 9a       	sbi	0x18, 1	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 22e:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_toggle();
 230:	0e 94 64 00 	call	0xc8	; 0xc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 23c:	0e 94 64 00 	call	0xc8	; 0xc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d1 e0       	ldi	r29, 0x01	; 1
 244:	ce 01       	movw	r24, r28
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 24a:	0e 94 64 00 	call	0xc8	; 0xc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24e:	ce 01       	movw	r24, r28
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 254:	c0 98       	cbi	0x18, 0	; 24
    lcd_e_toggle();
 256:	0e 94 64 00 	call	0xc8	; 0xc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 25a:	21 97       	sbiw	r28, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 26a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 274:	81 2f       	mov	r24, r17
 276:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>

}/* lcd_init */
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
