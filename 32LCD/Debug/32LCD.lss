
32LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f9  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000355  00000000  00000000  000012fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d2  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000227  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ec  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	//char String[5];
	//int value;

	//ADC_Init();
	
lcd_init(LCD_DISP_ON_CURSOR); /*initialize lcd,display on, cursor on */
  82:	8e e0       	ldi	r24, 0x0E	; 14
  84:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_init>

        lcd_clrscr();             /* clear screen of lcd */
  88:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
		lcd_home();               /* bring cursor to 0,0 */
  8c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_home>
		lcd_puts("Please Vote");        /* type something random */
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
		lcd_gotoxy(0,1);          /* go to 2nd row 1st col */
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>


		lcd_puts("");  /* type something random */
  a0:	85 e7       	ldi	r24, 0x75	; 117
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
	
		/* LCD16x2 cursor position */
		//value=ADC_Read(0);	/* Read ADC channel 0 */
		//itoa(value,String,10);	/* Integer to string conversion */ 
		
		lcd_puts("Group - 1");
  a8:	8c e6       	ldi	r24, 0x6C	; 108
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	87 e8       	ldi	r24, 0x87	; 135
  b2:	93 e1       	ldi	r25, 0x13	; 19
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x32>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x38>
  ba:	00 00       	nop
		_delay_ms(20000);
		lcd_clrscr();					
  bc:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
  c0:	f3 cf       	rjmp	.-26     	; 0xa8 <main+0x26>

000000c2 <toggle_e>:
  c2:	c6 9a       	sbi	0x18, 6	; 24
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <toggle_e+0x4>
  c6:	c6 98       	cbi	0x18, 6	; 24
  c8:	08 95       	ret

000000ca <lcd_write>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	d8 2f       	mov	r29, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xe>
  d4:	c4 9a       	sbi	0x18, 4	; 24
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0x10>
  d8:	c4 98       	cbi	0x18, 4	; 24
  da:	c5 98       	cbi	0x18, 5	; 24
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	c8 b3       	in	r28, 0x18	; 24
  e4:	c0 7f       	andi	r28, 0xF0	; 240
  e6:	8d 2f       	mov	r24, r29
  e8:	82 95       	swap	r24
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	8c 2b       	or	r24, r28
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	0e 94 61 00 	call	0xc2	; 0xc2 <toggle_e>
  f4:	df 70       	andi	r29, 0x0F	; 15
  f6:	dc 2b       	or	r29, r28
  f8:	d8 bb       	out	0x18, r29	; 24
  fa:	0e 94 61 00 	call	0xc2	; 0xc2 <toggle_e>
  fe:	cf 60       	ori	r28, 0x0F	; 15
 100:	c8 bb       	out	0x18, r28	; 24
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <lcd_read>:
 108:	88 23       	and	r24, r24
 10a:	11 f0       	breq	.+4      	; 0x110 <lcd_read+0x8>
 10c:	c4 9a       	sbi	0x18, 4	; 24
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_read+0xa>
 110:	c4 98       	cbi	0x18, 4	; 24
 112:	c5 9a       	sbi	0x18, 5	; 24
 114:	87 b3       	in	r24, 0x17	; 23
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	87 bb       	out	0x17, r24	; 23
 11a:	c6 9a       	sbi	0x18, 6	; 24
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x16>
 11e:	96 b3       	in	r25, 0x16	; 22
 120:	c6 98       	cbi	0x18, 6	; 24
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_read+0x1c>
 124:	c6 9a       	sbi	0x18, 6	; 24
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x20>
 128:	86 b3       	in	r24, 0x16	; 22
 12a:	c6 98       	cbi	0x18, 6	; 24
 12c:	92 95       	swap	r25
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 84 00 	call	0x108	; 0x108 <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_waitbusy+0xe>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_read>
 14e:	08 95       	ret

00000150 <lcd_command>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 65 00 	call	0xca	; 0xca <lcd_write>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_gotoxy>:
 164:	61 11       	cpse	r22, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <lcd_gotoxy+0xc>
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 16e:	08 95       	ret
 170:	80 54       	subi	r24, 0x40	; 64
 172:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_home>:
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 186:	08 95       	ret

00000188 <lcd_putc>:
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
 18c:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 190:	ca 30       	cpi	r28, 0x0A	; 10
 192:	49 f4       	brne	.+18     	; 0x1a6 <lcd_putc+0x1e>
 194:	80 34       	cpi	r24, 0x40	; 64
 196:	10 f4       	brcc	.+4      	; 0x19c <lcd_putc+0x14>
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	01 c0       	rjmp	.+2      	; 0x19e <lcd_putc+0x16>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	80 58       	subi	r24, 0x80	; 128
 1a0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_putc+0x26>
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 65 00 	call	0xca	; 0xca <lcd_write>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_puts>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	89 91       	ld	r24, Y+
 1ba:	88 23       	and	r24, r24
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <lcd_puts+0x16>
 1be:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_putc>
 1c2:	89 91       	ld	r24, Y+
 1c4:	81 11       	cpse	r24, r1
 1c6:	fb cf       	rjmp	.-10     	; 0x1be <lcd_puts+0xc>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_init>:
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	18 2f       	mov	r17, r24
 1d6:	87 b3       	in	r24, 0x17	; 23
 1d8:	8f 67       	ori	r24, 0x7F	; 127
 1da:	87 bb       	out	0x17, r24	; 23
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	fa ef       	ldi	r31, 0xFA	; 250
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x12>
 1e4:	c1 9a       	sbi	0x18, 1	; 24
 1e6:	c0 9a       	sbi	0x18, 0	; 24
 1e8:	0e 94 61 00 	call	0xc2	; 0xc2 <toggle_e>
 1ec:	e0 e0       	ldi	r30, 0x00	; 0
 1ee:	fe e4       	ldi	r31, 0x4E	; 78
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x22>
 1f4:	0e 94 61 00 	call	0xc2	; 0xc2 <toggle_e>
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d1 e0       	ldi	r29, 0x01	; 1
 1fc:	fe 01       	movw	r30, r28
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x30>
 202:	0e 94 61 00 	call	0xc2	; 0xc2 <toggle_e>
 206:	fe 01       	movw	r30, r28
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init+0x3a>
 20c:	c0 98       	cbi	0x18, 0	; 24
 20e:	0e 94 61 00 	call	0xc2	; 0xc2 <toggle_e>
 212:	21 97       	sbiw	r28, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x44>
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 222:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 22c:	81 2f       	mov	r24, r17
 22e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
